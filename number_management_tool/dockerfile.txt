# Dockerfile for Vonage Numbers Manager Web Interface
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Create necessary directories
RUN mkdir -p static templates logs

# Copy application files
COPY main.py .
COPY templates/ templates/
COPY static/ static/

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash vonage
RUN chown -R vonage:vonage /app
USER vonage

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000')" || exit 1

# Start the application
CMD ["python", "main.py"]

---

# docker-compose.yml
version: '3.8'

services:
  vonage-numbers-manager:
    build: .
    container_name: vonage-numbers-web
    ports:
      - "8000:8000"
    volumes:
      # Mount logs directory to persist logs
      - ./logs:/app/logs
      # Mount credentials file to persist saved credentials
      - ./vonage_numbers_credentials.ini:/app/vonage_numbers_credentials.ini
    environment:
      - HOST=0.0.0.0
      - PORT=8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: vonage-numbers-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # For HTTPS (uncomment and provide certificates)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - vonage-numbers-manager
    restart: unless-stopped
    profiles:
      - production

# Docker commands:
# 
# Build and start:
#   docker-compose up --build
#
# Start in background:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f
#
# Stop:
#   docker-compose down
#
# Start with nginx (production):
#   docker-compose --profile production up -d